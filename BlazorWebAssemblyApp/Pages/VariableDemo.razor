@page "/VariableDemo"

@using Asix;
@using WebApplication.Code;

@implements IDisposable


<div class="hero-section">
    <div class="container">
        <div class="row align-items-center">
            <div class="col-md-4">
                <img src="https://www.askom.pl/images/asix_system_page.png" class="img-fluid" alt="Hero Image">
            </div>
            <div class="col-md-8">
                <h1>Blazor WebAssembly Demo</h1>
                <p class="lead">Odczyt i odświeżanie wartości zmiennych</p>
            </div>
        </div>
    </div>
</div>


<div class="container">

    <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-4 row-cols-xl-5">

        @foreach (var i in mVariableModelList)
        {
            <div class="col mb-3">
                <VariableCard Model="@i"></VariableCard>
            </div>
        }

    </div>
</div>


@code {
    List<VariableModel> mVariableModelList = new();

    private System.Timers.Timer mTimer = new(5000);


    protected override void OnInitialized()
    {
        mVariableModelList.Add(new VariableModel("A000", "Temperatura spalin przed odemglaczem", "°C"));
        mVariableModelList.Add(new VariableModel("A004", "Temperatura kwasu siarkowego", "°C"));
        mVariableModelList.Add(new VariableModel("A008", "Temperatura wody ciepłej", "°C"));
        mVariableModelList.Add(new VariableModel("A082", "Przepływ kwasu siarkowego", "m³/h"));
        mVariableModelList.Add(new VariableModel("A084", "Poziom w zb. cyrkulacyjnym kwasu", "%"));
        mVariableModelList.Add(new VariableModel("A086", "Przepływ wody chłodzącej", "m³/h"));
    }


    protected override async Task OnParametersSetAsync()
    {
        await RefreshPageAsync();

        mTimer.Elapsed += async (sender, e) => await RefreshPageAsync();
        mTimer.AutoReset = true;
        mTimer.Start();
    }


    public void Dispose()
    {
        mTimer.Dispose();
    }


    async Task RefreshPageAsync()
    {
        await ReadVariableValues();
        await InvokeAsync(StateHasChanged);
    }


    async Task ReadVariableValues()
    {
        try
        {
            AsixRestClient asixRestClient = AsixRestClient.Create();
            string[] variableNames = mVariableModelList.Select(x => x.Name).ToArray();
            IList<VariableValue> variableValues = await asixRestClient.GetVariableValueAsync(variableNames);

            for (int i = 0; i < mVariableModelList.Count; i++)
            {
                mVariableModelList[i].SetVariableValue(variableValues[i]);
            }
        }
        catch (Exception e)
        {
            for (int i = 0; i < mVariableModelList.Count; i++)
            {
                mVariableModelList[i].ReadError = e.Message;
            }
        }
    }
}
